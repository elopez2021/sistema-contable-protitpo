package view;

import controller.Cabecera;
import controller.CatalogoController;
import controller.DocumentosController;
import controller.TransaccionController;
import controller.UsuarioController;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import model.CabeceraTransaccion;
import model.CatalogoCuenta;
import model.Documentos;
import model.TransaccionContable;
import model.Usuarios;
import static view.mantenimientos.isEmpty;

/**
 *
 * @author Admin
 */
public class Transacciones extends javax.swing.JPanel {

    /**
     * Creates new form Transacciones
     */
    String user;
    //inicilizando controladores
    CatalogoController catalogoCtrl = new CatalogoController();
    DocumentosController documentoCtrl = new DocumentosController();
    TransaccionController transaccionCtrl = new TransaccionController();
    UsuarioController usuarioCtrl = new UsuarioController();
    Cabecera cabeceraCtrl = new Cabecera();

    String[] numerosCuentasDetalles = catalogoCtrl.obtenerNumerosCuentasDetalles();
    List<String> descripcionesTiposDocumentos = documentoCtrl.obtenerDescripcionesTiposDocumentos();

    BigDecimal montoCredito = new BigDecimal("0.00");
    BigDecimal montoDebito = new BigDecimal("0.00");

    boolean modificar = false;
    List<TransaccionContable> transaccionesEliminadas = new ArrayList<>();

    public Transacciones(String user) {
        initComponents();
        this.user = user;
        tabla_trans.setModel(new DefaultTableModel(
                new Object[][]{},
                new String[]{"Secuencia", "Cuenta", "Descripción de la cuenta", "Débito", "Crédito", "Comentario"}
        ));

        tabla_trans.setComponentPopupMenu(ppMenuTabla);

        for (String descripcion : descripcionesTiposDocumentos) {
            cmbDocumento.addItem(descripcion);
        }

        txtFecha.setText(String.valueOf(LocalDate.now()));

    }

    public void inicializarMenu() {
        JMenuItem edit = new JMenuItem("Editar");
        JMenuItem delete = new JMenuItem("Eliminar");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        txtdescripciondoc = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtmonto = new javax.swing.JTextField();
        txttypedoc = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        txtnumdoc = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        ppMenuTabla = new javax.swing.JPopupMenu();
        editarItem = new javax.swing.JMenuItem();
        deleteItem = new javax.swing.JMenuItem();
        panel_transacciones = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txt_descripccion_doc = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txt_monto_transaccion = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txt_num_doc = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txt_credito = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txt_comentario = new javax.swing.JTextField();
        txt_debito = new javax.swing.JTextField();
        btn_agregar = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txt_descripcion_cuenta = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        btnGuardar = new javax.swing.JButton();
        Botton_limpiar = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_transacciones = new javax.swing.JScrollPane();
        tabla_trans = new javax.swing.JTable();
        lblMensajeDebito = new javax.swing.JLabel();
        lblMensajeCredito = new javax.swing.JLabel();
        cmbDocumento = new javax.swing.JComboBox<>();
        txt_cuenta = new javax.swing.JTextField();
        errCuenta = new javax.swing.JLabel();
        errNroDocumento = new javax.swing.JLabel();
        errTipoDocumento = new javax.swing.JLabel();
        errDescripcionDocumento = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        lblMensajeCrear = new javax.swing.JLabel();

        jLabel4.setText("Descrip. del documento");

        jLabel5.setText("Monto de transaccion");

        jLabel3.setText("Tipo de documento");

        txtmonto.setEditable(false);

        txttypedoc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txttypedocKeyPressed(evt);
            }
        });

        jLabel1.setText("Nº de documento");

        jLabel2.setText("Fecha");

        txtnumdoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnumdocActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Secuencia", "Cuenta", "Descripcion", "Debito", "Credito", "Comentario"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        editarItem.setText("Editar");
        editarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarItemActionPerformed(evt);
            }
        });
        ppMenuTabla.add(editarItem);

        deleteItem.setText("Eliminar");
        deleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemActionPerformed(evt);
            }
        });
        ppMenuTabla.add(deleteItem);

        panel_transacciones.setBackground(new java.awt.Color(255, 255, 255));
        panel_transacciones.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panel_transacciones.setPreferredSize(new java.awt.Dimension(1180, 525));

        jLabel6.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        jLabel6.setText("Des. del documento");

        txt_descripccion_doc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_descripccion_docKeyPressed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        jLabel7.setText("Monto de transaccion");

        jLabel8.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        jLabel8.setText("Tipo de documento");

        txt_monto_transaccion.setEditable(false);

        jLabel9.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        jLabel9.setText("Nº de documento");

        txt_num_doc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_num_docFocusLost(evt);
            }
        });
        txt_num_doc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_num_docActionPerformed(evt);
            }
        });
        txt_num_doc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_num_docKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_num_docKeyTyped(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Credito");

        txt_credito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_creditoActionPerformed(evt);
            }
        });
        txt_credito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_creditoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_creditoKeyTyped(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        jLabel17.setText("Comentario");

        jLabel18.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        jLabel18.setText("Debito");

        txt_debito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_debitoActionPerformed(evt);
            }
        });
        txt_debito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_debitoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_debitoKeyTyped(evt);
            }
        });

        btn_agregar.setBackground(new java.awt.Color(204, 153, 255));
        btn_agregar.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        btn_agregar.setText("AGREGAR");
        btn_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregarActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        jLabel19.setText("Cuenta");

        jLabel20.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        jLabel20.setText("Des. de la cuenta");

        txt_descripcion_cuenta.setEditable(false);
        txt_descripcion_cuenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_descripcion_cuentaKeyPressed(evt);
            }
        });

        btnGuardar.setBackground(new java.awt.Color(153, 102, 255));
        btnGuardar.setFont(new java.awt.Font("Sylfaen", 1, 16)); // NOI18N
        btnGuardar.setText("GUARDAR");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        Botton_limpiar.setBackground(new java.awt.Color(255, 153, 153));
        Botton_limpiar.setFont(new java.awt.Font("Sylfaen", 1, 16)); // NOI18N
        Botton_limpiar.setText("LIMPIAR");
        Botton_limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Botton_limpiarActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Sylfaen", 1, 24)); // NOI18N
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/transaccion.png"))); // NOI18N
        jLabel11.setText("TRANSACCIONES");

        tabla_transacciones.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        tabla_transacciones.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        tabla_transacciones.setComponentPopupMenu(ppMenuTabla);
        tabla_transacciones.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabla_transacciones.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N
        tabla_transacciones.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                tabla_transaccionesComponentAdded(evt);
            }
        });

        tabla_trans.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        tabla_trans.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Secuencia", "Cuenta", "Descripcion", "Debito", "Credito", "Comentario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_transacciones.setViewportView(tabla_trans);

        jScrollPane1.setViewportView(tabla_transacciones);

        lblMensajeDebito.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        lblMensajeDebito.setForeground(new java.awt.Color(255, 0, 0));

        lblMensajeCredito.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        lblMensajeCredito.setForeground(new java.awt.Color(255, 0, 0));

        cmbDocumento.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        cmbDocumento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Seleccione una opción-" }));

        txt_cuenta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_cuentaFocusLost(evt);
            }
        });
        txt_cuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cuentaActionPerformed(evt);
            }
        });
        txt_cuenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_cuentaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_cuentaKeyTyped(evt);
            }
        });

        errCuenta.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        errCuenta.setForeground(java.awt.Color.red);

        errNroDocumento.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        errNroDocumento.setForeground(java.awt.Color.red);

        errTipoDocumento.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        errTipoDocumento.setForeground(java.awt.Color.red);

        errDescripcionDocumento.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        errDescripcionDocumento.setForeground(java.awt.Color.red);

        lblFecha.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        lblFecha.setText("Fecha:");

        txtFecha.setEditable(false);
        txtFecha.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N

        lblMensajeCrear.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N

        javax.swing.GroupLayout panel_transaccionesLayout = new javax.swing.GroupLayout(panel_transacciones);
        panel_transacciones.setLayout(panel_transaccionesLayout);
        panel_transaccionesLayout.setHorizontalGroup(
            panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_transaccionesLayout.createSequentialGroup()
                .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_transaccionesLayout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(172, 172, 172)
                        .addComponent(Botton_limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_transaccionesLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(lblMensajeCrear, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107)
                        .addComponent(lblFecha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_transaccionesLayout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel17))
                        .addGap(79, 79, 79)
                        .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_transaccionesLayout.createSequentialGroup()
                                    .addComponent(txt_debito, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel16))
                                .addGroup(panel_transaccionesLayout.createSequentialGroup()
                                    .addComponent(txt_cuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(74, 74, 74)
                                    .addComponent(jLabel20)))
                            .addComponent(txt_comentario, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMensajeDebito, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_transaccionesLayout.createSequentialGroup()
                                .addComponent(btn_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(lblMensajeCredito))
                            .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txt_descripcion_cuenta, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txt_credito, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))))
                    .addGroup(panel_transaccionesLayout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jLabel9)
                        .addGap(47, 47, 47)
                        .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_num_doc, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errNroDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_transaccionesLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(10, 10, 10)
                                .addComponent(txt_monto_transaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(panel_transaccionesLayout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(26, 26, 26)
                                    .addComponent(txt_descripccion_doc, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(errDescripcionDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panel_transaccionesLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 827, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panel_transaccionesLayout.createSequentialGroup()
                .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_transaccionesLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 1166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_transaccionesLayout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(errTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panel_transaccionesLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(30, 30, 30)
                                .addComponent(cmbDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panel_transaccionesLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txt_comentario, txt_cuenta, txt_debito});

        panel_transaccionesLayout.setVerticalGroup(
            panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_transaccionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblMensajeCrear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_transaccionesLayout.createSequentialGroup()
                        .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(panel_transaccionesLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(txt_num_doc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(4, 4, 4)
                        .addComponent(errNroDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(cmbDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel_transaccionesLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(panel_transaccionesLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(txt_descripccion_doc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(3, 3, 3)
                        .addComponent(errDescripcionDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(panel_transaccionesLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(txt_monto_transaccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_transaccionesLayout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(lblMensajeCredito, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_transaccionesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(txt_cuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20)
                            .addComponent(txt_descripcion_cuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panel_transaccionesLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txt_debito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel16))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblMensajeDebito, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txt_comentario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17)))
                            .addGroup(panel_transaccionesLayout.createSequentialGroup()
                                .addComponent(txt_credito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_agregar)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panel_transaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar)
                    .addComponent(Botton_limpiar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panel_transaccionesLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txt_comentario, txt_cuenta, txt_debito});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel_transacciones, javax.swing.GroupLayout.PREFERRED_SIZE, 979, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_transacciones, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txttypedocKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txttypedocKeyPressed

    }//GEN-LAST:event_txttypedocKeyPressed

    private void txtnumdocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnumdocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnumdocActionPerformed

    private void editarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarItemActionPerformed
        // TODO add your handling code here:

        int r = tabla_trans.getSelectedRow();
        if (r == -1) {
            return;
        }

        String secuencia = tabla_trans.getValueAt(r, 0).toString();
        String cuenta = tabla_trans.getValueAt(r, 1).toString();
        String descripcion = tabla_trans.getValueAt(r, 2).toString();
        String debito = tabla_trans.getValueAt(r, 3).toString();
        String credito = tabla_trans.getValueAt(r, 4).toString();
        String comentario = tabla_trans.getValueAt(r, 5).toString();

        txt_cuenta.setText(cuenta);
        txt_descripcion_cuenta.setText(descripcion);
        txt_debito.setText(debito);
        txt_credito.setText(credito);
        txt_comentario.setText(comentario);

        BigDecimal monto_credito = new BigDecimal(credito.isEmpty() ? "0.00" : credito);
        BigDecimal monto_debito = new BigDecimal(debito.isEmpty() ? "0.00" : debito);

        montoCredito = montoCredito.subtract(monto_credito);
        montoDebito = montoDebito.subtract(monto_debito);

        DefaultTableModel model = (DefaultTableModel) tabla_trans.getModel();
        model.removeRow(r);  // Elimina la fila del modelo

        txt_monto_transaccion.setText(String.valueOf(montoCredito.add(montoDebito).abs()));

    }//GEN-LAST:event_editarItemActionPerformed

    private void deleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemActionPerformed
        // TODO add your handling code here:
        int r = tabla_trans.getSelectedRow();
        if (r == -1) {
            return;
        }

        String debito = tabla_trans.getValueAt(r, 3).toString();
        String credito = tabla_trans.getValueAt(r, 4).toString();

        BigDecimal monto_credito = new BigDecimal(credito.isEmpty() ? "0.00" : credito);
        BigDecimal monto_debito = new BigDecimal(debito.isEmpty() ? "0.00" : debito);

        montoCredito = montoCredito.subtract(monto_credito);
        montoDebito = montoDebito.subtract(monto_debito);
        DefaultTableModel model = (DefaultTableModel) tabla_trans.getModel();

        String secuenciaAEliminar = tabla_trans.getValueAt(r, 0).toString();

        TransaccionContable transaccion = new TransaccionContable();
        transaccion.setSecuencia_doc(Integer.parseInt(secuenciaAEliminar));
        transaccion.setNro_doc(txt_num_doc.getText());
        transaccionesEliminadas.add(transaccion); //añadir las transacciones a eliminar
        modificar = true;

        model.removeRow(r);  // Elimina la fila del modelo

        txt_monto_transaccion.setText(String.valueOf(montoCredito.add(montoDebito).abs()));

    }//GEN-LAST:event_deleteItemActionPerformed

    private void txt_cuentaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_cuentaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cuentaKeyTyped

    private void txt_cuentaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_cuentaKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (Character.isLetter(c) || Character.isWhitespace(c)) {
            txt_cuenta.setEditable(false);
        } else {
            txt_cuenta.setEditable(true);
        }
    }//GEN-LAST:event_txt_cuentaKeyPressed

    private void txt_cuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cuentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cuentaActionPerformed

    private void txt_cuentaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_cuentaFocusLost
        // TODO add your handling code here:
        if (!txt_cuenta.getText().isEmpty()) {
            int cuenta = Integer.parseInt(txt_cuenta.getText());
            String descripcion = catalogoCtrl.encontrarDescripcionCuentaDetalle(cuenta);
            if (descripcion != null) {
                txt_descripcion_cuenta.setText(descripcion);
                errCuenta.setText("");
            } else {
                errCuenta.setText("No es posible realizar una transaccion con esa cuenta");
                txt_cuenta.requestFocus();
            }
        }
    }//GEN-LAST:event_txt_cuentaFocusLost

    private void tabla_transaccionesComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tabla_transaccionesComponentAdded

    }//GEN-LAST:event_tabla_transaccionesComponentAdded

    private void Botton_limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Botton_limpiarActionPerformed
        txt_num_doc.setText(null);
        txt_descripccion_doc.setText(null);
        cmbDocumento.setSelectedItem("-Seleccione una opción-");
        txt_debito.setText(null);
        txt_descripcion_cuenta.setText(null);
        txt_credito.setText(null);
        txt_comentario.setText(null);
        lblMensajeCrear.setText("");
        txt_monto_transaccion.setText("");
    }//GEN-LAST:event_Botton_limpiarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        boolean camposValidos = true;
        BigDecimal saldo = montoCredito.subtract(montoDebito);

        if (saldo.compareTo(BigDecimal.ZERO) != 0) {
            JOptionPane.showMessageDialog(null, "Los montos de débito y crédito no están balanceados en la transacción", "Error", JOptionPane.ERROR_MESSAGE);
            camposValidos = false;
        }

        JTextField[] campos = {txt_num_doc, txt_descripccion_doc};
        JLabel[] errorLabels = {errNroDocumento, errDescripcionDocumento};

        for (int i = 0; i < campos.length; i++) {
            if (!isEmpty(campos[i], errorLabels[i], "Este campo es requerido")) {//el metodo viene de mantemientos.java
                camposValidos = false;
            }
        }

        if (cmbDocumento.getSelectedItem() == "-Seleccione una opción-") {
            errTipoDocumento.setText("Seleccione una opción");
            camposValidos = false;
        }

        if (!camposValidos) {
            return;
        }
        int tipoDocumento = documentoCtrl.buscarIdDocumento(cmbDocumento.getSelectedItem().toString());

        Usuarios usuario = usuarioCtrl.buscarUsuario(user);

        //preparar para guardar o modificar la cabecera transaccion        
        DefaultTableModel model = (DefaultTableModel) tabla_trans.getModel();
        int rowCount = model.getRowCount();
        boolean savedCorrectly = false;

        //eliminar las transacciones seleccionadas si hay
        if (!transaccionesEliminadas.isEmpty()) {
            for (TransaccionContable transaccion : transaccionesEliminadas) {
                String secuencia = String.valueOf(transaccion.getSecuencia_doc());
                String nroDoc = transaccion.getNro_doc();
                savedCorrectly = transaccionCtrl.eliminarTransaccion(nroDoc, secuencia);
            }
        }
        // Obtenemos los datos de la tabla Transacciones
        for (int i = 0; i < rowCount; i++) {
            Integer secuenciaDoc = Integer.parseInt(model.getValueAt(i, 0).toString());
            int cuentaContable = Integer.parseInt(model.getValueAt(i, 1).toString());
            double valorDebito = Double.parseDouble(model.getValueAt(i, 3).toString().isEmpty() ? "0.00" : model.getValueAt(i, 3).toString());
            double valorCredito = Double.parseDouble(model.getValueAt(i, 4).toString().isEmpty() ? "0.00" : model.getValueAt(i, 4).toString());
            String comentario = model.getValueAt(i, 5).toString();

            TransaccionContable transaccion = new TransaccionContable();
            transaccion.setNro_doc(txt_num_doc.getText());
            transaccion.setSecuencia_doc(secuenciaDoc);
            transaccion.setCuenta_contable(cuentaContable);
            transaccion.setValor_debito(valorDebito);
            transaccion.setValor_credito(valorCredito);
            transaccion.setComentario(comentario.isEmpty() ? "null" : comentario);

            if (transaccionCtrl.existeTransaccion(txt_num_doc.getText(), secuenciaDoc)) {
                savedCorrectly = transaccionCtrl.update(transaccion);
            } else {
                savedCorrectly = transaccionCtrl.save(transaccion);
            }
        }

        //guardar o modificar
        CabeceraTransaccion cabecera = new CabeceraTransaccion(txt_num_doc.getText(), tipoDocumento, txt_descripccion_doc.getText(), usuario.getNombreUsuario(), Double.parseDouble(txt_monto_transaccion.getText()), false);
        if (!modificar) {
            cabecera.setFechaDocu(LocalDate.now());
            cabecera.setHoraDocu(LocalTime.now());
            if (cabeceraCtrl.save(cabecera)) {
                JOptionPane.showMessageDialog(null, "Los datos fueron guardados correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                txt_monto_transaccion.setText("");
                savedCorrectly = true;
            } else {
                savedCorrectly = false;
            }
        } else {
            CabeceraTransaccion cabeceraModificar = new CabeceraTransaccion();
            try {
                cabeceraModificar = cabeceraCtrl.obtenerCabeceraPorNumero(txt_num_doc.getText());
            } catch (ParseException ex) {
                Logger.getLogger(Transacciones.class.getName()).log(Level.SEVERE, null, ex);
            }

            cabecera.setFechaDocu(cabeceraModificar.getFechaDocu());
            cabecera.setHoraDocu(cabeceraModificar.getHoraDocu());

            if (cabeceraCtrl.update(cabecera)) {
                JOptionPane.showMessageDialog(null, "Los datos fueron guardados correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                txt_monto_transaccion.setText("");
                savedCorrectly = true;
            } else {
                savedCorrectly = false;
            }
        }

        if (savedCorrectly) {
            model.setRowCount(0); //Limpiar los registros de la tabla
        } else {
            JOptionPane.showMessageDialog(null, "Error al guardar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txt_descripcion_cuentaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_descripcion_cuentaKeyPressed

    }//GEN-LAST:event_txt_descripcion_cuentaKeyPressed

    private void btn_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregarActionPerformed

        String debito = txt_debito.getText();
        String credito = txt_credito.getText();

        // Validación: No pueden estar ambos llenos
        if (txt_cuenta.getText().isEmpty()) {
            errCuenta.setText("Ingrese una cuenta");
        } else if (!debito.isEmpty() && !credito.isEmpty()) {
            lblMensajeDebito.setText("No puedes ingresar valores en débito y crédito al mismo tiempo.");
            lblMensajeCredito.setText("");
        } else if (debito.isEmpty() && credito.isEmpty()) {
            lblMensajeDebito.setText("Debes ingresar un valor en débito o crédito.");
            lblMensajeCredito.setText("");
        } else {
            // Los campos son válidos, procede a agregar los datos
            lblMensajeDebito.setText("");
            lblMensajeCredito.setText("");
            errCuenta.setText("");

            String data[] = {
                String.valueOf(tabla_trans.getRowCount() + 1), // Sequence
                txt_cuenta.getText(),
                txt_descripcion_cuenta.getText(),
                txt_debito.getText(),
                txt_credito.getText(),
                txt_comentario.getText()
            };

            DefaultTableModel tabla = (DefaultTableModel) tabla_trans.getModel();
            tabla.addRow(data);

            JOptionPane.showMessageDialog(null, "Los datos fueron guardados en la tabla.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            //Mantener el monto de debito y de credito acumulado
            BigDecimal monto_credito = new BigDecimal(txt_credito.getText().isEmpty() ? "0.00" : txt_credito.getText());
            BigDecimal monto_debito = new BigDecimal(txt_debito.getText().isEmpty() ? "0.00" : txt_debito.getText());

            montoCredito = montoCredito.add(monto_credito);
            montoDebito = montoDebito.add(monto_debito);

            BigDecimal montoTransaccion = new BigDecimal(txt_monto_transaccion.getText().isEmpty() ? "0.00" : txt_monto_transaccion.getText());
            txt_monto_transaccion.setText(String.valueOf(montoCredito.add(montoDebito).abs()));

            // Limpiar los campos de texto
            txt_cuenta.setText("");
            txt_descripcion_cuenta.setText("");
            txt_debito.setText("");
            txt_credito.setText("");
            txt_comentario.setText("");

        }
    }//GEN-LAST:event_btn_agregarActionPerformed

    private void txt_debitoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_debitoKeyTyped
        // TODO add your handling code here:
        int key = evt.getKeyChar();
        boolean numero = key >= 48 && key <= 57;
        if (!numero) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_debitoKeyTyped

    private void txt_debitoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_debitoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txt_descripcion_cuenta.requestFocus();
        }
    }//GEN-LAST:event_txt_debitoKeyPressed

    private void txt_debitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_debitoActionPerformed
        // Obtén el texto ingresado en el campo de crédito
        String textoCredito = txt_credito.getText().trim().toLowerCase();

        // Verifica si el texto es "crédito", si no, borra el contenido
        if (!textoCredito.equals("crédito")) {
            txt_credito.setText("");
        }
    }//GEN-LAST:event_txt_debitoActionPerformed

    private void txt_creditoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_creditoKeyTyped
        // TODO add your handling code here:
        int key = evt.getKeyChar();
        boolean numero = key >= 48 && key <= 57;
        if (!numero) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_creditoKeyTyped

    private void txt_creditoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_creditoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txt_comentario.requestFocus();
        }
    }//GEN-LAST:event_txt_creditoKeyPressed

    private void txt_creditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_creditoActionPerformed
        // Obtén el texto ingresado en el campo de débito
        String textoDebito = txt_debito.getText().trim().toLowerCase();

        // Verifica si el texto es "débito", si no, borra el contenido
        if (!textoDebito.equals("débito")) {
            txt_debito.setText("");
        }
    }//GEN-LAST:event_txt_creditoActionPerformed

    private void txt_num_docKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_num_docKeyTyped

    }//GEN-LAST:event_txt_num_docKeyTyped

    private void txt_num_docKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_num_docKeyPressed

    }//GEN-LAST:event_txt_num_docKeyPressed

    private void txt_num_docActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_num_docActionPerformed

    }//GEN-LAST:event_txt_num_docActionPerformed

    private void txt_descripccion_docKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_descripccion_docKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txt_cuenta.requestFocus();
        }
    }//GEN-LAST:event_txt_descripccion_docKeyPressed

    private void txt_num_docFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_num_docFocusLost
        CabeceraTransaccion cabecera = new CabeceraTransaccion();
        try {
            // TODO add your handling code here:
            cabecera = cabeceraCtrl.obtenerCabeceraPorNumero(txt_num_doc.getText());
        } catch (ParseException ex) {
            Logger.getLogger(Transacciones.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (cabecera != null && cabecera.isStatusActualizacion()) {
            JOptionPane.showMessageDialog(null, "No se puede modificar esta transacción", "Éxito", JOptionPane.ERROR_MESSAGE);
            txt_num_doc.setText("");
        }

        if (cabecera != null) {
            lblMensajeCrear.setText("Modificando...");
            modificar = true;
            Documentos tipoDocumento = documentoCtrl.buscarDocumento(String.valueOf(cabecera.getTipoDocu()));
            cmbDocumento.setSelectedItem(tipoDocumento.getDescripcion());
            txt_monto_transaccion.setText(String.valueOf(cabecera.getMontoTransaccion()));
            txt_descripccion_doc.setText(cabecera.getDescripcionDocu());

            DefaultTableModel model = (DefaultTableModel) tabla_trans.getModel();
            List<TransaccionContable> transacciones = transaccionCtrl.obtenerTransaccionesPorNumeroDocumento(txt_num_doc.getText());

            for (TransaccionContable transaccion : transacciones) {
                CatalogoCuenta cuenta = catalogoCtrl.buscarCuenta(String.valueOf(transaccion.getCuenta_contable()));
                String comentario = transaccion.getComentario();
                if (comentario.equals("null")) {
                    comentario = "";
                }
                Object[] rowData = {
                    transaccion.getSecuencia_doc(),
                    transaccion.getCuenta_contable(),
                    cuenta.getDescripcion_cta(),
                    (transaccion.getValor_debito() == 0.00 ? "" : transaccion.getValor_debito()),
                    transaccion.getValor_credito() == 0.00 ? "" : transaccion.getValor_credito(),
                    comentario
                };
                
                BigDecimal credito = new BigDecimal(String.valueOf(transaccion.getValor_credito()));  
                BigDecimal debito = new BigDecimal(String.valueOf(transaccion.getValor_debito()));        
                //calculating montoDebito and montoCredito
                montoCredito = montoCredito.add(credito);
                montoDebito = montoDebito.add(credito);
                model.addRow(rowData);
            }

        } else {
            modificar = false;
            lblMensajeCrear.setText("Creando...");
        }
    }//GEN-LAST:event_txt_num_docFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Botton_limpiar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btn_agregar;
    private javax.swing.JComboBox<String> cmbDocumento;
    private javax.swing.JMenuItem deleteItem;
    private javax.swing.JMenuItem editarItem;
    private javax.swing.JLabel errCuenta;
    private javax.swing.JLabel errDescripcionDocumento;
    private javax.swing.JLabel errNroDocumento;
    private javax.swing.JLabel errTipoDocumento;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblMensajeCrear;
    private javax.swing.JLabel lblMensajeCredito;
    private javax.swing.JLabel lblMensajeDebito;
    private javax.swing.JPanel panel_transacciones;
    private javax.swing.JPopupMenu ppMenuTabla;
    private javax.swing.JTable tabla_trans;
    private javax.swing.JScrollPane tabla_transacciones;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txt_comentario;
    private javax.swing.JTextField txt_credito;
    private javax.swing.JTextField txt_cuenta;
    private javax.swing.JTextField txt_debito;
    private javax.swing.JTextField txt_descripccion_doc;
    private javax.swing.JTextField txt_descripcion_cuenta;
    private javax.swing.JTextField txt_monto_transaccion;
    private javax.swing.JTextField txt_num_doc;
    private javax.swing.JTextField txtdescripciondoc;
    private javax.swing.JTextField txtmonto;
    private javax.swing.JTextField txtnumdoc;
    private javax.swing.JTextField txttypedoc;
    // End of variables declaration//GEN-END:variables

    private void cargarDatosDesdeArchivo(String nombre_de_archivotxt) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void setTitle(String jComboBox_desde_Archivo_de_Texto) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void setDefaultCloseOperation(int EXIT_ON_CLOSE) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void pack() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void setLocationRelativeTo(Object object) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
